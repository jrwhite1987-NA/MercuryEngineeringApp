<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BoardHardwareRevision" xml:space="preserve">
    <value>Board Hardware Revision</value>
  </data>
  <data name="BoardModelName" xml:space="preserve">
    <value>Board Model Name</value>
  </data>
  <data name="BoardPartNumber" xml:space="preserve">
    <value>Board Part Number</value>
  </data>
  <data name="BoardPartNumberEmpty" xml:space="preserve">
    <value>Board Part Number cannot be empty. Please select Board Part Number</value>
  </data>
  <data name="BoardSerialNumber" xml:space="preserve">
    <value>Board Serial Number</value>
  </data>
  <data name="CenterFrequency" xml:space="preserve">
    <value>Center Frequency</value>
  </data>
  <data name="ChannelPartNumber" xml:space="preserve">
    <value>Channel Part Number</value>
  </data>
  <data name="ComboBoxNotSelected" xml:space="preserve">
    <value>Please select {0}</value>
  </data>
  <data name="Depth" xml:space="preserve">
    <value>Depth</value>
  </data>
  <data name="Diameter" xml:space="preserve">
    <value>Diameter</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="FormatID" xml:space="preserve">
    <value>Format ID</value>
  </data>
  <data name="Fractional" xml:space="preserve">
    <value>Fractional BW</value>
  </data>
  <data name="Impedance" xml:space="preserve">
    <value>Impedance</value>
  </data>
  <data name="InsertionLoss" xml:space="preserve">
    <value>Insertion Loss</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>{0} cannot be more than {1} characters.</value>
  </data>
  <data name="MustBeFloat" xml:space="preserve">
    <value>{0} must be a Float value.</value>
  </data>
  <data name="MustBeNumber" xml:space="preserve">
    <value>Invalid Entry. {0} must be a number.</value>
  </data>
  <data name="PhaseAngle" xml:space="preserve">
    <value>PhaseAngle</value>
  </data>
  <data name="PhysicalID" xml:space="preserve">
    <value>Physical ID</value>
  </data>
  <data name="Power" xml:space="preserve">
    <value>Power</value>
  </data>
  <data name="PRF" xml:space="preserve">
    <value>PRF</value>
  </data>
  <data name="ProbeModelName" xml:space="preserve">
    <value>Probe Model Name</value>
  </data>
  <data name="ProbePartNumber" xml:space="preserve">
    <value>Probe Part Number</value>
  </data>
  <data name="ProbeSerialNumber" xml:space="preserve">
    <value>Probe Serial Number</value>
  </data>
  <data name="RangeValue" xml:space="preserve">
    <value>Value for {0} shoule be between {1} and {2}</value>
  </data>
  <data name="StartDepth" xml:space="preserve">
    <value>Start Depth</value>
  </data>
  <data name="SVolume" xml:space="preserve">
    <value>SVolume</value>
  </data>
  <data name="TankFocalLength" xml:space="preserve">
    <value>Tank Focal Length</value>
  </data>
  <data name="TextBoxBlank" xml:space="preserve">
    <value>{0} cannot be empty.</value>
  </data>
  <data name="TIC" xml:space="preserve">
    <value>TIC</value>
  </data>
  <data name="BoardInfoReadSuccessful" xml:space="preserve">
    <value>Read board info successful.</value>
  </data>
  <data name="DepthSent" xml:space="preserve">
    <value>Depth Sent Successfully</value>
  </data>
  <data name="FilterSent" xml:space="preserve">
    <value>Filter Sent Successfully</value>
  </data>
  <data name="LengthSent" xml:space="preserve">
    <value>Length Sent Successfully</value>
  </data>
  <data name="PacketExport" xml:space="preserve">
    <value>Packet Exported Successfully</value>
  </data>
  <data name="PowerSent" xml:space="preserve">
    <value>Power Sent Successfully</value>
  </data>
  <data name="PowerValueMsg" xml:space="preserve">
    <value>Power value not accepted by TCD</value>
  </data>
  <data name="ProbeInfoReadSuccessful" xml:space="preserve">
    <value>Read probe info successful.</value>
  </data>
  <data name="BoardInfoWriteSuccessful" xml:space="preserve">
    <value>Write board info successful.</value>
  </data>
  <data name="ChannelReadSuccessful" xml:space="preserve">
    <value>Read channel number successful.</value>
  </data>
  <data name="ChannelWriteSuccessful" xml:space="preserve">
    <value>Write channel number successful.</value>
  </data>
  <data name="OperatingMinutesReadSuccessful" xml:space="preserve">
    <value>Read operating minutes successful.</value>
  </data>
  <data name="ProbeInfoWriteSuccessful" xml:space="preserve">
    <value>Write probe info successful.</value>
  </data>
</root>